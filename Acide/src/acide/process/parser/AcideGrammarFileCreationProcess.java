/*
 * ACIDE - A Configurable IDE
 * Official web site: http://acide.sourceforge.net
 *
 * Copyright (C) 2007-2023
 * Authors:
 * 		- Fernando Sáenz Pérez (Team Director).
 *      - Version from 0.1 to 0.6:
 *      	- Diego Cardiel Freire.
 *			- Juan José Ortiz Sánchez.
 *          - Delfín Rupérez Cañas.
 *      - Version 0.7:
 *          - Miguel Martín Lázaro.
 *      - Version 0.8:
 *      	- Javier Salcedo Gómez.
 *      - Version from 0.9 to 0.11:
 *      	- Pablo Gutiérrez García-Pardo.
 *      	- Elena Tejeiro Pérez de Ágreda.
 *      	- Andrés Vicente del Cura.
 *      - Version from 0.12 to 0.16
 *      	- Semíramis Gutiérrez Quintana
 *      	- Juan Jesús Marqués Ortiz
 *      	- Fernando Ordás Lorente
 *      - Version 0.17
 *      	- Sergio Domínguez Fuentes
 * 		- Version 0.18
 * 			- Sergio García Rodríguez
 * 		- Version 0.19
 * 			- Carlos González Torres
 * 			- Cristina Lara López
 * 			- Yuejie Xu
 * 			- Yihang Zhuo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package acide.process.parser;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import acide.files.AcideFileManager;
import acide.files.bytes.AcideByteFileManager;
import acide.gui.mainWindow.AcideMainWindow;
import acide.language.AcideLanguageManager;
import acide.log.AcideLog;
import acide.process.gui.AcideProgressWindow;
import acide.resources.AcideResourceManager;

/**
 * ACIDE - A Configurable IDE grammar file creation process.
 * 
 * @version 0.19
 * @see Thread
 */
public class AcideGrammarFileCreationProcess extends Thread {

	/**
	 * ACIDE - A Configurable IDE grammar file creation default path.
	 */
	public static final String DEFAULT_PATH = "./src/acide/process/parser/grammar/";
	
	/**
	 * ACIDE - A Configurable IDE grammar file creation process grammar name.
	 */
	private String _grammarName;
	/**
	 * ACIDE - A Configurable IDE grammar file creation process verbose process.
	 */
	private boolean _verboseProcess;
	/**
	 * ACIDE - A Configurable IDE grammar file creation process action.
	 */
	private String _action;
	/**
	 * ACIDE - A Configurable IDE grammar file creation display message.
	 */
	private boolean _displayMessage;
	/**
	 * ACIDE - A Configurable IDE grammar file creation lock.
	 */
	private Object _lock;
	/**
	 * ACIDE - A Configurable IDE grammar file creation progress bar.
	 */
	private JProgressBar _progressBar;
	/**
	 * ACIDE - A Configurable IDE grammar file creation frame.
	 */
	private JFrame _progressBarFrame;
	
	/**
	 * Creates a new ACIDE - A Configurable IDE grammar file creation process.
	 * 
	 * @param grammarName
	 *            grammar name.
	 * @param verboseProcess
	 *            verbose process flag.
	 * @param display
	 *            display o no the message. 
	 * @param action
	 *            New/Modify/Load. 
	 * @version 0.19
	 */
	public AcideGrammarFileCreationProcess(String grammarName,
			boolean verboseProcess, String action, boolean display) {

		// Stores the grammar name
		_grammarName = grammarName;

		// Stores the verbose process flag
		_verboseProcess = verboseProcess;
		
		// Store the action
		_action = action;
		
		// Store the display
		_displayMessage = display;
		
		buildProgressBarFrame();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Thread#run()
	 */
	@Override
	public void run() {
		this._progressBarFrame.setVisible(true);
		
		String message, title;
		int type;
		
		// If the verbose flag is true then
		if (_verboseProcess) {

			this._progressBarFrame.setVisible(false);
			
			// Sets the initial text in the progress window
			AcideProgressWindow.getInstance().setInitialText(
					AcideLanguageManager.getInstance().getLabels()
							.getString("s1063"));

			// Shows the progress window
			AcideProgressWindow.getInstance().showWindow();
		}
		
		try {
			// Executes the antlr to obtain the .java files from the grammar
			executeAntlr();
			
			// Add package to .java files generated by antlr
			addPackage();
			
			// Get the .class of java files generated by antlr
			compileGeneratedFiles();
			
			// Rellocate the .class of java files generated by antlr
			rellocateClass();
			
			// Reallocates the generated files in the correspondent folder
			reallocateGeneratedFiles();
			
			
			message = AcideLanguageManager.getInstance().getLabels()
					.getString("s1065");
			title = AcideLanguageManager
					.getInstance().getLabels().getString("s1066");
			type = JOptionPane.INFORMATION_MESSAGE;
			
			//If grammar name isnt null then
			if (_grammarName != null) {
				//If action is Load then 
				if(_action.equals(AcideLanguageManager.getInstance().getLabels()
						.getString("s35"))) {
					// Updates the log
					AcideLog.getLog().info(
							AcideLanguageManager.getInstance().getLabels()
							.getString("s243")
							+ " " + _grammarName);				
				}
				else{
					// If the previous grammar configuration does not contain
					// newGrammar or lastModified
					if (!AcideMainWindow.getInstance().getFileEditorManager()
							.getSelectedFileEditorPanel()
							.getPreviousGrammarConfiguration().getPath()
							.contains("newGrammar")
							|| !AcideMainWindow.getInstance()
									.getFileEditorManager()
									.getSelectedFileEditorPanel()
									.getPreviousGrammarConfiguration().getPath()
									.contains("lastModified"))

						// Sets the previous grammar path
						AcideMainWindow
								.getInstance()
								.getFileEditorManager()
								.getSelectedFileEditorPanel()
								.getPreviousGrammarConfiguration()
								.setPath(
										AcideMainWindow.getInstance()
												.getFileEditorManager()
												.getSelectedFileEditorPanel()
												.getCurrentGrammarConfiguration()
												.getPath());

					// Updates the log
					AcideLog.getLog().info(
							AcideLanguageManager.getInstance().getLabels()
									.getString("s935"));
				}
				
				// Updates the current grammar configuration path
				AcideMainWindow.getInstance().getFileEditorManager()
				.getSelectedFileEditorPanel()
				.getCurrentGrammarConfiguration().setPath(_grammarName);
				
				// Updates the grammar message in the status bar
				AcideMainWindow
				.getInstance()
				.getStatusBar()
				.setGrammarMessage(
						AcideLanguageManager.getInstance().getLabels()
						.getString("s248")
						+ " "
						+ AcideMainWindow.getInstance()
						.getFileEditorManager()
						.getSelectedFileEditorPanel()
						.getCurrentGrammarConfiguration()
						.getName());
			}
			
			// If complete text analysis or incremental analysis is activated then
			if(AcideMainWindow.getInstance().getMenu().getConfigurationMenu().getGrammarMenu()
					.getAnalyzeMenu().getIncrementalAnalysisCheckBoxMenuItem().isSelected() 
					|| AcideMainWindow.getInstance().getMenu().getConfigurationMenu().getGrammarMenu()
					.getAnalyzeMenu().getCompleteTextAnalysisCheckBoxMenuItem().isSelected()
					|| (_lock != null && _lock.equals(AcideLanguageManager.getInstance().getLabels().getString("s2439")))
					) {
				// Get the file editor panel analyzer
				AcideGrammarAnalyzer analyzer = new AcideGrammarAnalyzer();
				
				if(_lock != null)
					analyzer.setLock(_lock);
				// Analyze the text
				analyzer.start();
			}
			
			// Update previousAnalyze value
			AcideResourceManager.getInstance().setProperty("previousAnalyze",
					AcideMainWindow.getInstance().getFileEditorManager()
					.getSelectedFileEditorPanel().getCurrentGrammarConfiguration().getName());
			
			// Set first analysis to false
			AcideMainWindow.getInstance().setFirstAnalysis(false);
		} catch(Exception e) {
			message = e.getMessage();
			title = AcideLanguageManager
					.getInstance().getLabels().getString("s943");
			type = JOptionPane.ERROR_MESSAGE;
		}
		
		// Close progress bar frame
		this._progressBarFrame.dispose();
		
		// If the verbose flag is true then
		if (_verboseProcess)
			// Enables the close button in the progress window
			AcideProgressWindow.getInstance().enableCloseButton();
		else {
			//	If the display message flag is true then
			if(_displayMessage)
				if(type == JOptionPane.INFORMATION_MESSAGE) {
					if(!_action.equals(AcideLanguageManager.getInstance().getLabels().getString("s2438")))
						// Displays a message
						JOptionPane.showMessageDialog(
								AcideMainWindow.getInstance(),
								message, title, type);
				}
				else {
					
			        JTextArea textArea = new JTextArea(10, 80);
			        textArea.setWrapStyleWord(true);
			        textArea.setLineWrap(true);
			        textArea.setText(message);
			        textArea.setEditable(false);

			        JScrollPane scrollPane = new JScrollPane(textArea);
			        
					// Displays a message
					JOptionPane.showMessageDialog(
							AcideMainWindow.getInstance(),
							scrollPane, title, type);
				}
			// Brings the main window to the front
			AcideMainWindow.getInstance().setAlwaysOnTop(true);
			
			// Only this time
			AcideMainWindow.getInstance().setAlwaysOnTop(false);	
			

		}
		
		// Enables the main window
		AcideMainWindow.getInstance().setEnabled(true);
	}

	/**
	 * Executes ANTLR for generating the required files to generate the .jar
	 * file.
	 * @throws Exception 
	 * 
	 * @version 0.19
	 */
	private void executeAntlr() throws Exception {

		String javaPath = null;

		try {

			// Gets the java path from the ACIDE - A Configurable IDE resource
			// manager
			javaPath = AcideResourceManager.getInstance().getProperty(
					"javaPath");
			
			if (javaPath.equals("null")) {
				if(!_displayMessage)
					// Displays an error message
					JOptionPane.showMessageDialog(
							null,
							AcideLanguageManager.getInstance().getLabels()
									.getString("s927"),
							AcideLanguageManager.getInstance().getLabels()
									.getString("s934"), JOptionPane.ERROR_MESSAGE);
				throw new Exception(AcideLanguageManager.getInstance()
						.getLabels().getString("s927"));
			}
			else if(!javaPath.contains("java.exe")) {
				if(!_displayMessage)
					// Displays an error message
					JOptionPane.showMessageDialog(
							null,
							AcideLanguageManager.getInstance().getLabels()
									.getString("s2444"),
							AcideLanguageManager.getInstance().getLabels()
									.getString("s928"), JOptionPane.ERROR_MESSAGE);
				
				throw new Exception(AcideLanguageManager.getInstance()
						.getLabels().getString("s2444"));
			}
		} catch (Exception exception) {

			// Updates the log
			AcideLog.getLog().error(exception.getMessage());

			// Closes the progress window
			AcideProgressWindow.getInstance().closeWindow();
			
			throw new Exception(exception.getMessage());

		}

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1049"));

		// Updates the progress window
		AcideProgressWindow
				.getInstance()
				.setText("\"" + javaPath + "\" -jar ./lib/antlr-4.7.1-complete.jar Expr.g4");

		// Executes antlr to generate the files which will be at the .jar
		Process process = null;

		try {

			// Executes the command
			process = Runtime.getRuntime().exec("\"" + javaPath + "\" -jar ./lib/antlr-4.7.1-complete.jar Expr.g4");
			
			BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			StringBuilder errorMessage = new StringBuilder();
			String line;
			errorMessage.append(System.lineSeparator());
			while ((line = errorReader.readLine()) != null) {
				errorMessage.append(line);
				errorMessage.append(System.lineSeparator());
			}
			//System.out.println(errorMessage);
			
			// Waits for the process to finish
			int exitValue = process.waitFor();
            //System.out.println("Process exitValue: " + exitValue);
            if(exitValue != 0) {
				throw new Exception(AcideLanguageManager.getInstance().getLabels()
						.getString("s2428") + errorMessage.toString());
            }
            else {
				// Updates the progress window
				AcideProgressWindow.getInstance().setText(
						AcideLanguageManager.getInstance().getLabels()
								.getString("s1050"));
            }
		} catch (Exception exception) {

			// Updates the progress window
			AcideProgressWindow.getInstance().setText(exception.getMessage());
			
			// Updates the log
			AcideLog.getLog().error(exception.getMessage());

			// Closes the progress window
			//AcideProgressWindow.getInstance().closeWindow();

			throw new Exception(exception.getMessage());
		}


	}

	/**
	 * Adds the exceptions to the generated GrammarParser.java file.
	 */
	private void modifyGrammarParserFile() {

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1051"));

		File file = new File("GrammarParser.java");
		if (!file.exists()) {
			return;
		}

		// Gets the file content
		String fileContent = null;
		fileContent = AcideFileManager.getInstance().load("GrammarParser.java");
		String exception = "throw new RecognitionException();";

		// Inserts the first exception
		String aux = "";
		int index = fileContent.indexOf("recover(ex");
		index++;
		aux = fileContent.substring(index);
		int indexAux = aux.indexOf(";");
		index += indexAux + 1;
		String head = fileContent.substring(0, index);
		String tail = fileContent.substring(index);
		fileContent = head + exception + tail;

		// Inserts the following exceptions
		boolean finished = false;
		while (!finished) {
			index = fileContent.lastIndexOf(exception);
			aux = fileContent.substring(index);
			indexAux = aux.indexOf("recover(ex");
			if (indexAux == -1)
				finished = true;
			else {
				String aux2 = aux.substring(indexAux);
				int indexAux2 = aux2.indexOf(";");
				index = index + indexAux + indexAux2 + 1;
				head = fileContent.substring(0, index);
				tail = fileContent.substring(index);
				fileContent = head + exception + tail;
			}
		}

		// Updates the grammar parser file with the new content
		AcideFileManager.getInstance().write("GrammarParser.java", fileContent);

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1052"));
	}

	/**
	 * Compiles the generated files by ANTLR to obtain the .class files.
	 * 
	 * @version 0.19
	 * @throws Exception 
	 */
	private void compileGeneratedFiles() throws Exception {

		String javacPath = null;

		try {

			// Gets the javac path from the ACIDE - A Configurable IDE resource
			// manager
			javacPath = AcideResourceManager.getInstance().getProperty(
					"javacPath");
			if (javacPath.equals("null")){
				// Displays an error message
				JOptionPane.showMessageDialog(
						null,
						AcideLanguageManager.getInstance().getLabels()
								.getString("s929"),
						AcideLanguageManager.getInstance().getLabels()
								.getString("s934"), JOptionPane.ERROR_MESSAGE);
				
				throw new Exception(AcideLanguageManager.getInstance()
						.getLabels().getString("s929"));
			}
			else if(!javacPath.contains("javac.exe")) {
				// Displays an error message
				JOptionPane.showMessageDialog(
						null,
						AcideLanguageManager.getInstance().getLabels()
								.getString("s2445"),
						AcideLanguageManager.getInstance().getLabels()
								.getString("s928"), JOptionPane.ERROR_MESSAGE);
				throw new Exception(AcideLanguageManager.getInstance()
						.getLabels().getString("s2445"));
			}
		} catch (Exception exception) {

			// Displays an error message
			JOptionPane.showMessageDialog(
					null,
					AcideLanguageManager.getInstance().getLabels()
							.getString("s929"),
					AcideLanguageManager.getInstance().getLabels()
							.getString("s933"), JOptionPane.ERROR_MESSAGE);

			// Updates the log
			AcideLog.getLog().error(exception.getMessage());

			// Closes the progress window
			AcideProgressWindow.getInstance().closeWindow();

			throw new Exception(exception.getMessage());
		}

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1053"));

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				"\"" + javacPath + "\" -cp .;./lib/antlr-4.7.1-complete.jar *.java");

		Process process = null;
		try {
			// Executes the command
			process = Runtime.getRuntime().exec("\"" + javacPath + "\" -cp .;./lib/antlr-4.7.1-complete.jar *.java");
			// Executes the command
			//process = Runtime.getRuntime().exec(
			//		"\"" + javacPath + "\" -cp . .\\*.java -d .");

			// Waits for the process to finish
			process.waitFor();
			
		} catch (Exception exception) {

			// Updates the log
			AcideLog.getLog().error(exception.getMessage());

			// Closes the progress window
			AcideProgressWindow.getInstance().closeWindow();

			throw new Exception(exception.getMessage());
		}

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1054"));
	}

	/**
	 * Add package to .java file generated by anltr
	 * 
	 * @version 0.19
	 */
	private void addPackage() {
		// Add package to the ExprBaseListener.java file
		AcideByteFileManager.getInstance().addPackage("ExprBaseListener.java");

		// Add package to the ExprLexer.java file
		AcideByteFileManager.getInstance().addPackage("ExprLexer.java");
		
		// Add package to the ExprListener.java file
		AcideByteFileManager.getInstance().addPackage("ExprListener.java");
		
		// Add package to the ExprParser.java file
		AcideByteFileManager.getInstance().addPackage("ExprParser.java");
		
	}
	
	/**
	 * Reallocates the generated files into the correspondent folder in the
	 * source folder of ACIDE - A Configurable IDE.
	 * 
	 * @version 0.19
	 */
	private void reallocateGeneratedFiles() {

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1055"));

		// Reallocates the Expr.g4 file
		AcideByteFileManager.getInstance().reallocateFile("Expr.g4",
				DEFAULT_PATH + "Expr.g4");
		
		// Reallocates the Expr.interp file
		AcideByteFileManager.getInstance().reallocateFile("Expr.interp",
				DEFAULT_PATH + "Expr.interp");
		
		// Reallocates the Expr.tokens file
		AcideByteFileManager.getInstance().reallocateFile("Expr.tokens",
				DEFAULT_PATH + "Expr.tokens");

		// Reallocates the ExprBaseListener.java file
		AcideByteFileManager.getInstance().reallocateFile("ExprBaseListener.java",
				DEFAULT_PATH + "ExprBaseListener.java");

		// Reallocates the ExprLexer.interp file
		AcideByteFileManager.getInstance().reallocateFile("ExprLexer.interp",
				DEFAULT_PATH + "ExprLexer.interp");
		
		// Reallocates the ExprLexer.java file
		AcideByteFileManager.getInstance().reallocateFile("ExprLexer.java",
				DEFAULT_PATH + "ExprLexer.java");
		
		// Reallocates the ExprLexer.tokens file
		AcideByteFileManager.getInstance().reallocateFile("ExprLexer.tokens",
				DEFAULT_PATH + "ExprLexer.tokens");
		
		// Reallocates the ExprListener.java file
		AcideByteFileManager.getInstance().reallocateFile("ExprListener.java",
				DEFAULT_PATH + "ExprListener.java");

		// Reallocates the ExprParser.java file
		AcideByteFileManager.getInstance().reallocateFile("ExprParser.java",
				DEFAULT_PATH + "ExprParser.java");

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1056"));
		
	}

	/**
	 * Generates the .jar file which contains the grammar configuration.
	 */
	private void generateJarFile() {

		String jarPath = null;
		try {

			// Gets the jar path from the ACIDE - A Configurable IDE resource
			// manager
			jarPath = AcideResourceManager.getInstance().getProperty("jarPath");

			if (jarPath.equals("null"))
				throw new Exception(AcideLanguageManager.getInstance()
						.getLabels().getString("s930"));
		} catch (Exception exception) {

			// Displays an error message
			JOptionPane.showMessageDialog(
					null,
					AcideLanguageManager.getInstance().getLabels()
							.getString("s930"),
					AcideLanguageManager.getInstance().getLabels()
							.getString("s932"), JOptionPane.ERROR_MESSAGE);

			// Updates the log
			AcideLog.getLog().error(exception.getMessage());
			exception.printStackTrace();
		}

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1057"));

		Process process = null;
		try {

			// Executes the command
			process = Runtime.getRuntime().exec(
					"\"" + jarPath + "\" cfm " + _grammarName + ".jar "
							+ "acide/process/parser/grammar/manifest.txt "
							+ "acide/process/parser/grammar");

			// Waits for the process to finish
			process.waitFor();
		} catch (Exception exception) {

			// Updates the log
			AcideLog.getLog().error(exception.getMessage());
			exception.printStackTrace();

			// Closes the progress window
			AcideProgressWindow.getInstance().closeWindow();

			return;
		}

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1058"));
	}

	/**
	 * Deletes the generated files by ANTLR once the .jar file is generated and
	 * they have been reallocated in the correspondent folder.
	 */
	private void deleteGeneratedFiles() {

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1059"));

		// Deletes the Expr.g4 file
		File file = new File("Expr.g4");
		file.delete();

		// Deletes the Expr.interp file
		file = new File("Expr.interp");
		file.delete();

		// Deletes the Expr.tokens file
		file = new File("Expr.tokens");
		file.delete();

		// Deletes the ExprBaseListener.java file
		file = new File("ExprBaseListener.java");
		file.delete();

		// Deletes the ExprLexer.interp file
		file = new File("ExprLexer.interp");
		file.delete();

		// Deletes the ExprLexer.java file
		file = new File("ExprLexer.java");
		file.delete();

		// Deletes the ExprLexer.tokens file
		file = new File("ExprLexer.tokens");
		file.delete();

		// Deletes the ExprListener.java file
		file = new File("ExprListener.java");
		file.delete();

		// Deletes the ExprParser.java file
		file = new File("ExprParser.java");
		file.delete();
		
		// Deletes the syntaxRules.txt
		file = new File("syntaxRules.txt");
		file.delete();

		// Deletes the lexicalCategories.xml
		file = new File("lexicalCategories.xml");
		file.delete();

		// Deletes the acide folder
		file = new File("acide");
		deleteSubdirectories(file);
		file.delete();

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1060"));
	}

	/**
	 * Reallocates the generated .jar file in the the grammar configuration
	 * folder.
	 */
	private void reallocateJarFile() {

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1061"));

		// Reallocates the .jar file
		AcideByteFileManager.getInstance().reallocateFile(
				_grammarName + ".jar",
				"./configuration/grammars/" + _grammarName + ".jar");

		// Updates the progress window
		AcideProgressWindow.getInstance().setText(
				AcideLanguageManager.getInstance().getLabels()
						.getString("s1062"));
	}

	/**
	 * Deletes the sub directories of a directory given as a parameter.
	 * 
	 * The method file.delete() only works for empty directories. This method
	 * deletes all the files in each sub directory from the original directory
	 * using recursion.
	 * 
	 * @param directory
	 *            directory to delete.
	 */
	private void deleteSubdirectories(File directory) {

		// Gets the files for the directory
		File[] files = directory.listFiles();

		for (int index = 0; index < files.length; index++) {

			// Recursion for the directories
			if (files[index].isDirectory()) {
				deleteSubdirectories(files[index]);
			}

			// Delete the file
			files[index].delete();
		}
	}
	
	
	/**
	 * Change the current lexer
	 * @throws Exception 
	 */
	/*
	private void modifyLexer() throws Exception{
		
		File lexer = new File(_lexer);
		if(lexer.length() != 0) {
			// Loads the lexicon configuration
			AcideMainWindow.getInstance().getFileEditorManager()
					.getSelectedFileEditorPanel().getLexiconConfiguration()
					.loadLexerInGrammar(_lexer);
			
			// Resets the selected file editor text edition area
			AcideMainWindow.getInstance().getFileEditorManager()
					.getSelectedFileEditorPanel().resetStyledDocument();

			// Updates the lexicon message status bar
			AcideMainWindow
					.getInstance()
					.getStatusBar()
					.setLexiconMessage(
							AcideLanguageManager.getInstance().getLabels()
									.getString("s449")
									+ " "
									+ AcideMainWindow.getInstance()
											.getFileEditorManager()
											.getSelectedFileEditorPanel()
											.getLexiconConfiguration().getName());
		}
	}
	*/
	
	
	/** Rellocate the java file generated by antlr to
	 * the corresponding classpath
	 * 
	 * @version 0.19
	 */
	private void rellocateClass() {
		File files = new File(".");
		for(File file: files.listFiles()) {
			if(file.isFile() && file.getName().endsWith(".class")) {
				AcideByteFileManager.getInstance().reallocateFile(file.getName(),
						"./out/production/Acide/acide/process/parser/grammar/" + file.getName());
			}
		}
	}
	
	public void setLock(Object lock) {
		_lock = lock;
	}
	
	/** Build the progress bar frame 
	 * 
	 * @version 0.19
	 */
	public void buildProgressBarFrame() {
		// Disable AcideMainWindow
		AcideMainWindow.getInstance().setEnabled(false);
		
		_progressBar = new JProgressBar();
		_progressBar.setIndeterminate(true);
		
		_progressBarFrame = new JFrame(AcideLanguageManager.getInstance().getLabels().getString("s2448"));
		
        JPanel panel = new JPanel();
        JLabel label = new JLabel(AcideLanguageManager.getInstance().getLabels().getString("s2449"));
		panel.add(label);
		panel.add( _progressBar);
		
		_progressBarFrame.add(panel); 
		_progressBarFrame.setSize(200, 100);
        
        Point ubicacionVentanaPrincipal = AcideMainWindow.getInstance().getLocationOnScreen();

        // Calculate the coordinates to center the new window
        int x = ubicacionVentanaPrincipal.x + (AcideMainWindow.getInstance().getWidth() - _progressBarFrame.getWidth()) / 2;
        int y = ubicacionVentanaPrincipal.y + (AcideMainWindow.getInstance().getHeight() - _progressBarFrame.getHeight()) / 2;
        
        // Set Frames properties
        _progressBarFrame.setLocation(x,y);
        _progressBarFrame.setAlwaysOnTop(true);
        _progressBarFrame.setResizable(false);
	}
}
